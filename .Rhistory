figure37b
save_image(figure37b,
file = "cov/grafics/2rv_estimate_m1_h01.pdf",
width = 600, height = 750)
##### Figure 3.7 (b) #####
figure37b = plot_ly(df_37) |>
add_surface(x = x,
y = x,
z = c_val2,
size = .4, alpha = .7,
showscale = F) |>
add_surface(x = x,
y = x,
z = est_wd,
size = .4, alpha = .7, colorscale = cs2,
showscale = F) |>
back_layout(x = 1.9, y = .9, z = 1.3)
figure37b
save_image(figure37b,
file = "cov/grafics/2rv_estimate_m1_h01.pdf",
width = 600, height = 750)
save.image("cov/data/illustrations.RData")
rm(list = setdiff(ls(),
c("figure31a", "figure31b",
"figure32a", "figure32b",
"figure37a", "figure37b")))
figure37b
save.image("cov/data/plotly_illustration_figures.RData")
load("cov/data/plotly_illustration_figures.RData")
saveWidget(figure37a, "docs/figure37a.html", selfcontained = T)
saveWidget(figure37b, "docs/figure37b.html", selfcontained = T)
saveWidget(tagList(h1("Figure 3.1"), figure31a), "docs/figure31.html", selfcontained = T) # for the html figura 3.1a and 3.1b are identical
saveWidget(tagList(h1("Figure 3.2 (a)"), figure32a), "docs/figure32a.html", selfcontained = T)
saveWidget(tagList(h1("Figure 3.2 (b)"), figure32b), "docs/figure32b.html", selfcontained = T)
saveWidget(tagList(h1("Figure 3.7 (a)"), figure37a), "docs/figure37a.html", selfcontained = T)
saveWidget(tagList(h1("Figure 3.7 (b)"), figure37b), "docs/figure37b.html", selfcontained = T)
library(plotly)
library(htmlwidgets)
load("cov/data/plotly_illustration_figures.RData")
saveWidget(tagList(h1("Figure 3.1"), figure31a), "docs/figure31.html", selfcontained = T) # for the html figura 3.1a and 3.1b are identical
library(htmltolls)
library(htmltools)
load("cov/data/plotly_illustration_figures.RData")
saveWidget(tagList(h1("Figure 3.1"), figure31a), "docs/figure31.html", selfcontained = T) # for the html figura 3.1a and 3.1b are identical
saveWidget(tagList(h1("Figure 3.2 (a)"), figure32a), "docs/figure32a.html", selfcontained = T)
saveWidget(tagList(h1("Figure 3.2 (b)"), figure32b), "docs/figure32b.html", selfcontained = T)
saveWidget(tagList(h1("Figure 3.7 (a)"), figure37a), "docs/figure37a.html", selfcontained = T)
saveWidget(tagList(h1("Figure 3.7 (b)"), figure37b), "docs/figure37b.html", selfcontained = T)
tagList(h1("Figure 3.1")
)
tagList(h1("Figure 3.1"), figure31a)
saveWidget(tagList(h1("Figure 3.1"), figure31a), "docs/figure31.html", selfcontained = T) # for the html figura 3.1a and 3.1b are identical
install.packages("htmltools")
library(plotly)
library(htmlwidgets)
library(htmltools)
load("cov/data/plotly_illustration_figures.RData")
saveWidget(tagList(h1("Figure 3.1"), figure31a), "docs/figure31.html", selfcontained = T) # for the html figura 3.1a and 3.1b are identical
saveWidget(tagList(h1("Figure 3.2 (a)"), figure32a), "docs/figure32a.html", selfcontained = T)
install.packages("htmltools")
library(plotly)
library(htmlwidgets)
library(htmltools)
load("cov/data/plotly_illustration_figures.RData")
saveWidget(tagList(h1("Figure 3.1"), figure31a), "docs/figure31.html", selfcontained = T) # for the html figura 3.1a and 3.1b are identical
detach("package:htmltools", unload = TRUE)
remove.packages("htmltools")
install.packages("htmltools")
detach("package:htmlwidgets", unload = TRUE)
detach("package:plotly", unload = TRUE)
library(htmlwidgets)
detach("package:htmlwidgets", unload = TRUE)
install.packages("htmltools")
library(plotly)
library(htmlwidgets)
library(htmltools)
library(htmltools)
load("cov/data/plotly_illustration_figures.RData")
saveWidget(tagList(h1("Figure 3.1"), figure31a), "docs/figure31.html", selfcontained = T) # for the html figura 3.1a and 3.1b are identical
htmltools::tagList()
tagList(h1("Figure 3.1"), figure31a)
install.packages("htmlwidgets")
library(plotly)
library(htmlwidgets)
library(htmltools)
load("cov/data/plotly_illustration_figures.RData")
saveWidget(tagList(h1("Figure 3.1"), figure31a), "docs/figure31.html", selfcontained = T) # for the html figura 3.1a and 3.1b are identical
.libPaths()
find.package("htmltools")
library(biLocPol) # please install this package from Github first. See "README.md" file for instructions
library(future.apply)
library(tidyverse)
library(tictoc)
library(plotly)
source("cov/functions.R")
# Parameter OU Process
theta = 2; sigma = 3
sd = 0.75
p.eval = 150
p = 50
n = 100#
h = 0.6
x.design = (1:p - 0.5)/p
#set.seed(99)
Y = biLocPol::OU(n, x.design, sigma = sigma, alpha = theta) + matrix(rnorm(n * p, 0, sd), n, p) # n x p
Z = observation_transformation(Y)
w = local_polynomial_weights(p, h, p.eval, F, m = 2, grid.type = "less", del = 1)
estimate = eval_weights(w, Z)[,,3]
x = observation_grid(p.eval, comp = "full")[1:p.eval, 1]
G10 = matrix(apply(observation_grid(p.eval, comp = "full"), 1, del10_cov_OU), p.eval, p.eval)
UP = upper.tri(G10, diag = T)
G10_UP = G10
G10_UP[!UP] = NA
G10_DN = G10
G10_DN[UP] = NA
estimate_UP = estimate
estimate_DN = estimate
estimate_DN[UP] = NA
estimate_UP[!UP] = NA
trim = which(x.design > 0.2 & x.design < 0.8)
cs2 = lisG10_UPcs2 = list(c(0, 1), c("lightblue", "darkred"))
##### Figure 3.9 (a) #####
figure39a = plot_ly() |>
add_surface(x = x, y = x, z = G10_UP,
alpha = .8, showscale = F) |>
add_surface(x = x, y = x, z = G10_DN,
alpha = .8, showscale = F) |>
add_surface(x = x, y = x, z = estimate_UP, alpha = .8, colorscale = cs2,
showscale = F) |>
add_surface(x = x, y = x, z = estimate_DN,
alpha = .8, colorscale = cs2, showscale = F) |>
front_layout(x = -.9, y = -2.3, z = .7)
figure39a
set.seed(99)
Y = biLocPol::OU(n, x.design, sigma = sigma, alpha = theta) + matrix(rnorm(n * p, 0, sd), n, p) # n x p
Z = observation_transformation(Y)
estimate = eval_weights(w, Z)[,,3]
x = observation_grid(p.eval, comp = "full")[1:p.eval, 1]
G10 = matrix(apply(observation_grid(p.eval, comp = "full"), 1, del10_cov_OU), p.eval, p.eval)
UP = upper.tri(G10, diag = T)
G10_UP = G10
G10_UP[!UP] = NA
G10_DN = G10
G10_DN[UP] = NA
estimate_UP = estimate
estimate_DN = estimate
estimate_DN[UP] = NA
estimate_UP[!UP] = NA
trim = which(x.design > 0.2 & x.design < 0.8)
cs2 = lisG10_UPcs2 = list(c(0, 1), c("lightblue", "darkred"))
##### Figure 3.9 (a) #####
figure39a = plot_ly() |>
add_surface(x = x, y = x, z = G10_UP,
alpha = .8, showscale = F) |>
add_surface(x = x, y = x, z = G10_DN,
alpha = .8, showscale = F) |>
add_surface(x = x, y = x, z = estimate_UP, alpha = .8, colorscale = cs2,
showscale = F) |>
add_surface(x = x, y = x, z = estimate_DN,
alpha = .8, colorscale = cs2, showscale = F) |>
front_layout(x = -.9, y = -2.3, z = .7)
figure39a
save_image(figure39a,
file = "cov/grafics/OU_G10.pdf",
width = 600, height = 750)
rm(w)
save.image("cov/data/results_figure_3_9a.RData")
del10_cov_z_2rv = function(x){
4/9 * pi * cos(pi * x[1]) * sin(pi * x[2]) - 10/9 * pi * sin(1.25 * pi * x[1]) * cos(pi * 1.25 * x[2])
}
del01_cov_z_2rv = function(x){
del10_cov_z_2rv(c(x[2], x[1]))
}
# data
n = 100
#h2 = 0.3
h3 = 0.2
#w2 = local_polynomial_weights(p, h2, p.eval, F, m = 2, grid.type = "less", del = 1)
w3 = local_polynomial_weights(p, h3, p.eval, F, m = 2, grid.type = "less", del = 1)
#h3 = 0.2
w2 = local_polynomial_weights(p, h2, p.eval, F, m = 2, grid.type = "less", del = 1)
h2 = 0.3
#h3 = 0.2
w2 = local_polynomial_weights(p, h2, p.eval, F, m = 2, grid.type = "less", del = 1)
#h3 = 0.2
w2 = local_polynomial_weights(p, h2, p.eval, T, m = 2, grid.type = "less", del = 1)
#w3 = local_polynomial_weights(p, h3, p.eval, F, m = 2, grid.type = "less", del = 1)
set.seed(45)
Y2 = biLocPol::z_2rv(n, p) + matrix(rnorm(n * p, 0, sd), n, p) # n x p
Z2 = observation_transformation(Y2)
estimate_2 = eval_weights(w3, Z2)[,,3]
G10_2 = matrix(apply(observation_grid(p.eval, comp = "full"), 1, del01_cov_z_2rv), p.eval, p.eval)
UP = upper.tri(G10_2, diag = T)
DN = lower.tri(G10_2, diag = F)
estimate_2UP = estimate_2
estimate_2DN = estimate_2
estimate_2DN[UP] = NA
estimate_2UP[DN] = NA
##### Figure 3.9 (b) #####
figure39b = plot_ly() |>
add_surface(x = x, y = x, z = G10_2, alpha = .8) |>
add_surface(x = x, y = x, z = estimate_2UP, alpha = .8, colorscale = cs2, showscale = F) |>
add_surface(x = x, y = x, z = estimate_2DN, alpha = .8, colorscale = cs2, showscale = F) |>
front_layout(x = -.9, y = -2.3, z = .7)
estimate_2 = eval_weights(w1, Z2)[,,3]
estimate_2 = eval_weights(w2, Z2)[,,3]
G10_2 = matrix(apply(observation_grid(p.eval, comp = "full"), 1, del01_cov_z_2rv), p.eval, p.eval)
UP = upper.tri(G10_2, diag = T)
DN = lower.tri(G10_2, diag = F)
estimate_2UP = estimate_2
estimate_2DN = estimate_2
estimate_2DN[UP] = NA
estimate_2UP[DN] = NA
##### Figure 3.9 (b) #####
figure39b = plot_ly() |>
add_surface(x = x, y = x, z = G10_2, alpha = .8) |>
add_surface(x = x, y = x, z = estimate_2UP, alpha = .8, colorscale = cs2, showscale = F) |>
add_surface(x = x, y = x, z = estimate_2DN, alpha = .8, colorscale = cs2, showscale = F) |>
front_layout(x = -.9, y = -2.3, z = .7)
figure39b
##### Figure 3.9 (b) #####
figure39b = plot_ly() |>
add_surface(x = x, y = x, z = G10_2, alpha = .8, showscale = F) |>
add_surface(x = x, y = x, z = estimate_2UP, alpha = .8, colorscale = cs2, showscale = F) |>
add_surface(x = x, y = x, z = estimate_2DN, alpha = .8, colorscale = cs2, showscale = F) |>
front_layout(x = -.9, y = -2.3, z = .7)
figure39b
library(biLocPol) # please install this package from Github first. See "README.md" file for instructions
library(future.apply)
library(tidyverse)
library(tictoc)
library(plotly)
#### results ####
load("cov/data/results_figure_3_9a.RData") # for Illustration in Figure 3.9a
load("cov/data/results_figure_3_9b.RData") # for Illustration in Figure 3.9b
source("cov/functions.R")
# Parameter OU Process
theta = 2; sigma = 3
sd = 0.75
p.eval = 150
p = 50
n = 100#
h = 0.6
x.design = (1:p - 0.5)/p
set.seed(99)
Y = biLocPol::OU(n, x.design, sigma = sigma, alpha = theta) + matrix(rnorm(n * p, 0, sd), n, p) # n x p
Z = observation_transformation(Y)
#### results ####
load("cov/data/results_figure_3_9a.RData") # for Illustration in Figure 3.9a
del10_cov_z_2rv = function(x){
4/9 * pi * cos(pi * x[1]) * sin(pi * x[2]) - 10/9 * pi * sin(1.25 * pi * x[1]) * cos(pi * 1.25 * x[2])
}
del01_cov_z_2rv = function(x){
del10_cov_z_2rv(c(x[2], x[1]))
}
# data
n = 100
h2 = 0.3
#h3 = 0.2
w2 = local_polynomial_weights(p, h2, p.eval, T, m = 2, grid.type = "less", del = 1)
#w3 = local_polynomial_weights(p, h3, p.eval, F, m = 2, grid.type = "less", del = 1)
set.seed(45)
Y2 = biLocPol::z_2rv(n, p) + matrix(rnorm(n * p, 0, sd), n, p) # n x p
Z2 = observation_transformation(Y2)
estimate_2 = eval_weights(w2, Z2)[,,3]
G10_2 = matrix(apply(observation_grid(p.eval, comp = "full"), 1, del01_cov_z_2rv), p.eval, p.eval)
UP = upper.tri(G10_2, diag = T)
DN = lower.tri(G10_2, diag = F)
estimate_2UP = estimate_2
estimate_2DN = estimate_2
estimate_2DN[UP] = NA
estimate_2UP[DN] = NA
##### Figure 3.9 (b) #####
figure39b = plot_ly() |>
add_surface(x = x, y = x, z = G10_2, alpha = .8, showscale = F) |>
add_surface(x = x, y = x, z = estimate_2UP, alpha = .8, colorscale = cs2, showscale = F) |>
add_surface(x = x, y = x, z = estimate_2DN, alpha = .8, colorscale = cs2, showscale = F) |>
front_layout(x = -.9, y = -2.3, z = .7)
figure39b
rm(w3)
save.image("cov/data/results_figure_3_9b.RData")
rm(w2)
save.image("cov/data/results_figure_3_9b.RData")
gc()
library(tidyverse)
library(plotly)
library(lubridate)
library(hms)
library(biLocPol) # please install this package from Github first. See "README.md" file for instructions
library(future.apply)
my_theme = theme_grey(base_size = 15) +
theme(plot.title = element_text(size = 14))
load("weather/data/weather_data_raw.RData")
N$DATUM = str_split_i(N$MESS_DATUM, pattern = " ", i = 1) |> ymd()
tage = c(1, 4, 8, 12, 15, 18, 22, 25, 29)
N_full = N[-(1:6),]
N = N %>%
filter(TAG %in% tage)
N |>
filter(TAG %in% c(1, 8, 15, 22, 29)) |>
ggplot() +
geom_line(aes(x = UHRZEIT, y = TT_10, group = JAHR*TAG, colour = JAHR), alpha = .4) +
facet_wrap(MONAT ~.)
##### Figure 3.12 (a) #####
# Temperature curves in January
N |>
filter(MONAT == 1) |>
ggplot() +
geom_line(aes(x = UHRZEIT, y = TT_10, group = JAHR*TAG, colour = JAHR), alpha = .6) +
labs(y = "Temp. in C°", x = "hours", title = "Temp. in August", colour = "year") +
my_theme
ggsave("weather/grafics/january_temp_curves.pdf", device = "pdf", width = 5, height = 3.8, unit = "in")
##### Figure 3.12 (b) #####
# Temperature curves in July
N |>
filter(TAG %in% tage,
MONAT == 7) |>
ggplot() +
geom_line(aes(x = UHRZEIT, y = TT_10, group = JAHR*TAG, colour = JAHR), alpha = .6) +
labs(y = "Temp. in C°", x = "hours", title = "Temp. in July", colour = "year") +
my_theme
# pivot wider
N_wide = N |>
filter(TAG %in% tage) |>  # No consecutive days
mutate(UHRZEIT = as.character(UHRZEIT)) |>
select(JAHR, MONAT, TAG, UHRZEIT, TT_10) |>
pivot_wider(names_from = UHRZEIT,
values_from = TT_10)
Y_all = N_full |>
mutate(UHRZEIT = as.character(UHRZEIT)) |>
select(JAHR, MONAT, TAG, UHRZEIT, TT_10) |>
pivot_wider(names_from = UHRZEIT, values_from = TT_10) |>
filter(MONAT == 4) |>
select(-(1:3))
empirical_cov_all = Y_all |>
as.data.frame() |>
observation_transformation(na.rm = T, grid.type = "full")
empirical_cov_filtered = N_wide |>
filter(MONAT == 4) |>
select(-(1:3)) |>
as.data.frame() |>
observation_transformation(na.rm = T, grid.type = "full")
df_all = tibble(empirical_cov_all, empirical_cov_filtered, observation_grid(144, comp = "full"))
# grafic not contained in paper
plot_ly(df_all, size = .4) |>
add_markers(x = ~Var1, y = ~Var2, z = ~empirical_cov_all) |>
add_markers(x = ~Var1, y = ~Var2, z = ~empirical_cov_filtered, alpha = 0.4)
#### NA Count #####
N |>  summarise(.by = c(JAHR, MONAT, TAG),
n = n(), mean = mean(TT_10)) |>
filter(n == 144) |>
summarise(.by = MONAT,
n = n()) |>
arrange(MONAT)
cov_estimation = function(month, weights = W, nw =  N_wide){
y = nw |>
filter(MONAT == month) |>
select(-(1:3))
z = y |>
as.data.frame() |> # TODO: fix this in biLocPol
observation_transformation(na.rm = T)
eval_weights(weights, z)
}
N_wide |>
filter(MONAT == 3) |>
select(-(1:3)) |> is.na() |> sum()
#### calculate weights ####
p.eval = 72
W = local_polynomial_weights(144, 0.2, p.eval, T, m = 1)
Wh05 = local_polynomial_weights(144, 0.5, p.eval, T, m = 1)
Wh01 = local_polynomial_weights(144, 0.1, p.eval, T, m = 1)
eval_time = N$UHRZEIT[1:146][seq(2, 144, 2)]
##### January #####
# Figure 9a: temp curves in January
N |>  filter(TAG %in% c(1, 15, 29),
MONAT == 1) |>
ggplot() +
geom_line(aes(x = UHRZEIT, y = TT_10, group = JAHR*TAG, colour = JAHR), alpha = .7) +
labs(y = "Temp. in C°", x = "hours", title = "Temp. in January", colour = "year") +
theme(text = element_text(size = 18))
##### January #####
g_hat1 = cov_estimation(1)
var_hat1 = diag(g_hat1)
var_est1 = tibble(var_hat = var_hat1, x = eval_time)
var_est1 |>
ggplot(aes(x = x, y = sqrt(var_hat1))) +
geom_line(size = .6) +
lims(y = c(0.2, 5)) +
labs(y = NULL, x = "hour", title = "Std. deviation of temperatur in January") +
theme(text = element_text(size = 18))
cov_est_df1 = data.frame(x = W$x.eval, y = W$x.eval, z = g_hat1)
cs2 = list(c(0, 1), c("lightblue", "darkred"))
# Plot of Covariance estimation: Not in Paper
plot_ly(cov_est_df1, x = ~x, y = ~y, z = ~g_hat1, size = .4) |>
add_surface(colorscale = cs2, alpha = .3) |>
layout(scene = list(xaxis = list(title = ""),
yaxis = list(title = ""),
zaxis = list(title = "")))
temp = matrix(diag(g_hat1), p.eval, p.eval)
cor_hat1 = g_hat1 / sqrt( temp * t(temp) )
##### Figure 3.14 (a) #####
plot_ly(cov_est_df1, x = ~x*24, y = ~y*24, z = ~cor_hat1, size = .4) |>
add_surface(colorscale = cs2, alpha = .3) |>
layout(scene = list(xaxis = list(title = ""),
yaxis = list(title = ""),
zaxis = list(title = "")))
##### Figure 3.14 (a) #####
figure_3_14a = plot_ly(cov_est_df1, x = ~x*24, y = ~y*24, z = ~cor_hat1, size = .4) |>
add_surface(colorscale = cs2, alpha = .3) |>
back_layout()
##### Figure 3.14 (a) #####
figure_3_14a = plot_ly(cov_est_df1, x = ~x*24, y = ~y*24, z = ~cor_hat1, size = .4) |>
add_surface(colorscale = cs2, alpha = .3, showscale = F) |>
back_layout()
back_layout = function(p, x = 2, y = 1.2, z = .2) {
p |> layout(
scene = list(
camera = list(eye = list(x = x, y = y, z = z)),# controls the angle
xaxis = list(title = list(text = "", font = list(size = 24)), tickfont = list(size = 14)),
yaxis = list(title = list(text = "", font = list(size = 24)), tickfont = list(size = 14)),
zaxis = list(title = list(text = "", font = list(size = 24)), tickfont = list(size = 14))),
showlegend = F
)
}
##### Figure 3.14 (a) #####
figure_3_14a = plot_ly(cov_est_df1, x = ~x*24, y = ~y*24, z = ~cor_hat1, size = .4) |>
add_surface(colorscale = cs2, alpha = .3, showscale = F) |>
back_layout()
figure_3_14a
##### Figure 3.14 (a) #####
figure_3_14a = plot_ly(cov_est_df1, x = ~x*24, y = ~y*24, z = ~cor_hat1, size = .4) |>
add_surface(colorscale = cs2, alpha = .3, showscale = F) |>
back_layout(x =-2, y = -1, z = 1 )
##### Figure 3.14 (a) #####
figure_3_14a = plot_ly(cov_est_df1, x = ~x*24, y = ~y*24, z = ~cor_hat1, size = .4) |>
add_surface(colorscale = cs2, alpha = .3, showscale = F) |>
back_layout(x = -2, y = -1, z = 1)
figure_3_14a
##### July #####
g_hat = cov_estimation(7)
##### July #####
g_hat = cov_estimation(7)
var_hat = diag(g_hat)
var_est = tibble(var_hat, x = eval_time)
var_est |>
ggplot(aes(x = x, y = sqrt(var_hat))) +
geom_line(linewidth = .7) +
lims(y = c(0.2, 5)) +
labs(y = NULL, x = "hour", title = "Std. deviation of temperatur in August") +
theme(legend.position = "none",
text = element_text(size = 18))
cov_est_df = data.frame(x = W$x.eval, y = W$x.eval, z = g_hat)
cs2 = list(c(0, 1), c("lightblue", "darkred"))
# Plot of Covariance Kernel: Not in Paper
plot_ly(cov_est_df, x = ~x, y = ~y, z = ~g_hat, size = .4) |>
add_surface(colorscale = cs2, alpha = .3) |>
layout(scene = list(xaxis = list(title = ""),
yaxis = list(title = ""),
zaxis = list(title = "")))
# Plot of Covariance Kernel: Not in Paper
figure_3_14b = plot_ly(cov_est_df, x = ~x, y = ~y, z = ~g_hat, size = .4) |>
add_surface(colorscale = cs2, alpha = .3, showscale = F) |>
back_layout(x = -2, y = -1, z = 1)
figure_3_14b
figure_3_14b
temp = matrix(diag(g_hat), p.eval, p.eval)
cor_hat = g_hat / sqrt( temp * t(temp) )
##### Figure 3.14(b) #####
figure_3_14b = plot_ly(cov_est_df, x = ~x*24, y = ~y*24, z = ~cor_hat, size = .4) |>
add_surface(colorscale = cs2, alpha = .3, showscale = F) |>
back_layout(x = -2, y = -1, z = 1)
figure_3_14b
##### std_deviation #####
sd_tibble_m1h02 = sapply(1:12,
function(m){
est = cov_estimation(m) |> diag() |> sqrt()
}) |>
as_tibble()
sd_tibble_m1h05 = sapply(1:12,
function(m){
est = cov_estimation(m, weights = Wh05) |> diag() |> sqrt()
}) |> as_tibble()
sd_tibble_m1h01 = sapply(1:12,
function(m){
est = cov_estimation(m, weights = Wh01) |> diag() |> sqrt()
}) |> as_tibble()
sd_tibble = sd_tibble_m1h01 |>
rbind(sd_tibble_m1h02, sd_tibble_m1h05) |>
mutate(time = rep(eval_time, 3),
h = gl(3, 72, labels = c("144", "288", "720"))) |>
pivot_longer(cols = 1:12,
names_to = "month",
values_to = "sd",
cols_vary = "slowest") |>
mutate(month = gl(12, 72,
labels = c("Jan", "Feb", "Mar", "Apr",
"May", "Jun", "Jul", "Aug",
"Sep", "Oct", "Nov", "Dec")) |> rep(each = 3))
sd_tibble$time  = sd_tibble$time |> as.POSIXct(format = "%H:%M")
##### Figure 3.13 #####
sd_tibble |>
ggplot(aes(x = time, y = sd, lty = h, col = h)) +
geom_line(linewidth = .8) +
lims(y = c(0.2, 6)) +
labs(y = NULL, x = NULL) +
theme(text = element_text(size = 18)) +
facet_wrap(.~month, nrow = 3) +
scale_linetype_manual(values = c(2,5,4), name = "h (min)") +
scale_color_manual(values = 1:3, name = "h (min)") +
scale_x_datetime(date_breaks = "8 hours", date_labels = "%H:%M")
rm(W, Wh01, Wh05)
save.image("weather/data/weather_covariace_results.RData")
