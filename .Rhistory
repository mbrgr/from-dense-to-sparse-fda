library(locpol)
library(tidyverse)
library(biLocPol)
library(parallel)
library(future.apply)
#### source functions ####
source("mean/functions_mean_derivative.R")
#### results ####
load("mean/data/bandwidth_comparison_per_degree_full_interval.RData")
#### description ####
# Figures in the Appendix; analogue to Figure 2 but on the full interval [0,1]
#### packages ####
library(locpol)
library(tidyverse)
library(biLocPol)
library(parallel)
library(future.apply)
#### source functions ####
source("mean/functions_mean_derivative.R")
#### results ####
load("mean/data/bandwidth_comparison_per_degree_full_interval.RData")
View(Figure_B1b)
###### Figure B.2 (b) ######
# Local cubic estimator bandwidth comparison
Figure_B2b = ggplot(erg_deg_3_df, aes(x = h, y = sup.err, color = p, pch = p)) +
geom_point() + lims(y = c(0.5, 20)) + labs(subtitle = "n = 600")+
deriv_est_theme
Figure_B2b
Figure_B2a = ggplot(erg_deg_2_df, aes(x = h, y = sup.err, color = p, pch = p)) +
geom_point() + labs(subtitle = "n = 600") + lims(y = c(0.5, 20)) +
deriv_est_theme
Figure_B2a
rm(Figure_B1a, Figure_B1b, Figure14a, Figure14b)
save.image("mean/data/bandwidth_comparison_per_degree_full_interval.RData")
#### Packages ####
library(biLocPol)
library(future.apply)
library(tidyverse)
library(tictoc)
#### Bandwidth Comparison ####
N = 500
n.seq = c(50, 100, 200, 400)
p.seq = c(15, 25, 50, 75, 100)
# p.seq = 25
p.eval = 100
H = lapply(1:length(p.seq), function(l){seq(1, 3/p.seq[l], -0.05)})
# H = lapply(1:length(p.seq), function(l){seq(.6, 3/p.seq[l], -0.2)})
# Parameter OU Process
theta = 2; sigma = 3
# Standard deviation for additional errors
sd = 0.5
##### function #####
k_fold_cv_simulation = function(N, n, p, h.seq, K = 5, m = 1, w.parallel = T, theta = 2, sigma = 3, sd = 0.75){
grp = sample(rep(1:K, ceiling(n/K)), n)
help = function(h){
w_h = local_polynomial_weights(p, h, p.eval = p, m = m, parallel = w.parallel, parallel.environment = F)
max_diff = numeric(K)
future_replicate(N, {
Y = FDA_observation(n, x.design = (1:p - 0.5)/p, f = biLocPol::mu,
r.process = OU, process.arg = list(alpha = theta, sigma = sigma, x0 = 0), eps.arg = list(sd = sd))
for(kk in 1:K){
test_grp     = matrix(observation_transformation(Y[grp == kk,], grid.type = "full"), p, p)
train_grp    = observation_transformation(Y[grp != kk,], grid.type = "less")
pred         = eval_weights(w_h, train_grp)
max_diff[kk] = max(abs((test_grp - pred)[!as.logical(diag(p))]))
}
mean(max_diff)
}, future.seed = T)
}
mean_sup = sapply(h.seq, help)
h.seq[apply(mean_sup, 1, which.min)]
}
##### calculation #####
set.seed(43)
five_fold_cv = list()
cl = parallel::makeCluster(parallel::detectCores( ) - 1)
future::plan(future::cluster)
##### evaluation #####
load("C:/Users/mberger.PC12599/HESSENBOX/GitHub/FDA-Covariance-Estimator/data/data_20240602_5fold.RData")
five_fold_tbl = tibble(h = five_fold_cv %>% unlist(), p = gl(5, 1000, labels = p.seq))
five_fold_tbl %>%
ggplot(aes(y = h, x = p, col = p)) +
geom_boxplot()+
theme(text = element_text(size = 18))
five_fold_table = five_fold_tbl %>%
group_by_all() %>%
summarise(n = n()/1000)
five_fold_table %>%
ggplot(aes(h, n)) +
geom_point(size = 3) +
ylim(c(0, 0.1))+
facet_wrap(.~p, 1) +
ylab(NULL) +
labs(title = "n = 100") +
theme(text = element_text(size = 18))
rm(n.seq)
five_fold_tbl %>%
summarise(.by = p, mean(h)) +
deriv_est_theme
my_theme = theme_grey(base_size = 15) +
theme(plot.title = element_text(size = 14))
five_fold_tbl %>%
summarise(.by = p, mean(h)) +
my_theme
five_fold_table %>%
ggplot(aes(h, n)) +
geom_point(size = 3) +
ylim(c(0, 0.1))+
facet_wrap(.~p, 1) +
ylab(NULL) +
labs(title = "n = 100")  +
my_theme
ggsave("cov/grafics/5fold_cv_n100.pdf",
device = "pdf",
unit = "in",
width = 10,
height = 5.5)
save.image("cov/data/results_cv_n100.RData")
#### results ####
load("cov/data/results_cv_n100.RData")
ggsave("cov/grafics/5fold_cv_n100.pdf",
device = "pdf",
unit = "in",
width = 10,
height = 4)
five_fold_tbl %>%
summarise(.by = p, mean(h))
five_fold_table %>%
ggplot(aes(h, n)) +
geom_point(size = 3) +
ylim(c(0, 0.1))+
facet_wrap(.~p, 1) +
ylab(NULL) +
labs(title = "n = 100")  +
my_theme
ggsave("cov/grafics/5fold_cv_n100.pdf",
device = "pdf",
unit = "in",
width = 10,
height = 4)
#### results ####
load("weather/data/weather_estimation.RData")
##### Figure 3.16 #####
final_est %>%
ggplot(aes( x = as.POSIXct(time), y = value, color = g, linetype = g)) +
facet_wrap(name~., nrow = 2)  +
geom_line(linewidth = .9) +
labs(y = NULL, x = "time", title = expression(Partial~derivatives~of~Gamma~on~the~diagonal) ) +
scale_discrete_manual(
aesthetics = c("color", "linetype"),
values = c("G10" = 2,"G01" = 4),
name = "Deriv.",
labels = c("G10" = expression(italic(d)^{"(1,0)"}*Gamma), "G01" = expression(italic(d)^{"(0,1)"}*Gamma))
) +
deriv_est_theme  +
scale_x_datetime(date_breaks = "8 hours", date_labels = "%H:%M")
#### Packages and Theme ####
library(biLocPol)
library(tidyverse)
library(lubridate)
library(hms)
library(interp)
library(reshape2)
library(plotly)
library(locpol)
library(ffscb)
##### Figure 3.16 #####
final_est %>%
ggplot(aes( x = as.POSIXct(time), y = value, color = g, linetype = g)) +
facet_wrap(name~., nrow = 2)  +
geom_line(linewidth = .9) +
labs(y = NULL, x = "time", title = expression(Partial~derivatives~of~Gamma~on~the~diagonal) ) +
scale_discrete_manual(
aesthetics = c("color", "linetype"),
values = c("G10" = 2,"G01" = 4),
name = "Deriv.",
labels = c("G10" = expression(italic(d)^{"(1,0)"}*Gamma), "G01" = expression(italic(d)^{"(0,1)"}*Gamma))
) +
deriv_est_theme  +
scale_x_datetime(date_breaks = "8 hours", date_labels = "%H:%M")
ggsave("weather/grafics/weather_part_deriv_gamma_diagonal_all_months.pdf", device = "pdf", width = 11, height = 4.5, units = "in")
ggsave("weather/grafics/weather_part_deriv_gamma_diagonal_all_months.pdf", device = "pdf", width = 11, height = 4.8, units = "in")
ggsave("weather/grafics/weather_part_deriv_gamma_diagonal_all_months.pdf", device = "pdf", width = 9, height = 4.5, units = "in")
ggsave("weather/grafics/weather_part_deriv_gamma_diagonal_all_months.pdf", device = "pdf", width = 9, height = 4.8, units = "in")
##### Figure 3.16 #####
final_est %>%
ggplot(aes( x = as.POSIXct(time), y = value, color = g, linetype = g)) +
facet_wrap(name~., nrow = 2)  +
geom_line(linewidth = .9) +
labs(y = NULL, x = "time", title = expression(Partial~derivatives~of~Gamma~on~the~diagonal) ) +
scale_discrete_manual(
aesthetics = c("color", "linetype"),
values = c("G10" = 2,"G01" = 4),
name = "Deriv.",
labels = c("G10" = expression(italic(d)^{"(1,0)"}*Gamma), "G01" = expression(italic(d)^{"(0,1)"}*Gamma))
) +
deriv_est_theme  +
scale_x_datetime(date_breaks = "8 hours", date_labels = "%H:%M") +
theme(legend.position = "bottom")
##### Figure 3.16 #####
final_est %>%
ggplot(aes( x = as.POSIXct(time), y = value, color = g, linetype = g)) +
facet_wrap(name~., nrow = 2)  +
geom_line(linewidth = .9) +
labs(y = NULL, x = "time", title = expression(Partial~derivatives~of~Gamma~on~the~diagonal) ) +
scale_discrete_manual(
aesthetics = c("color", "linetype"),
values = c("G10" = 2,"G01" = 4),
name = "Deriv.",
labels = c("G10" = expression(italic(d)^{"(1,0)"}*Gamma   ), "G01" = expression(italic(d)^{"(0,1)"}*Gamma))
) +
deriv_est_theme  +
scale_x_datetime(date_breaks = "8 hours", date_labels = "%H:%M") +
theme(legend.position = "bottom")
##### Figure 3.16 #####
final_est %>%
ggplot(aes( x = as.POSIXct(time), y = value, color = g, linetype = g)) +
facet_wrap(name~., nrow = 2)  +
geom_line(linewidth = .9) +
labs(y = NULL, x = "time", title = expression(Partial~derivatives~of~Gamma~on~the~diagonal) ) +
scale_discrete_manual(
aesthetics = c("color", "linetype"),
values = c("G10" = 2,"G01" = 4),
name = "Deriv.",
labels = c("G10" = expression(italic(d)^{"(1,0)"}*Gamma), "G01" = expression(italic(d)^{"(0,1)"}*Gamma))
) +
deriv_est_theme  +
scale_x_datetime(date_breaks = "8 hours", date_labels = "%H:%M")
##### Figure 3.16 #####
final_est %>%
ggplot(aes( x = as.POSIXct(time), y = value, color = g, linetype = g)) +
facet_wrap(name~., nrow = 2)  +
geom_line(linewidth = .9) +
labs(y = NULL, x = "time", title = expression(Partial~derivatives~of~Gamma~on~the~diagonal) ) +
scale_discrete_manual(
aesthetics = c("color", "linetype"),
values = c("G10" = 2,"G01" = 4),
name = "Deriv.",
labels = c("G10" = expression(italic(d)^{"(1,0)"}*Gamma), "G01" = expression(italic(d)^{"(0,1)"}*Gamma))
) +
deriv_est_theme  +
scale_x_datetime(date_breaks = "12 hours", date_labels = "%H:%M")
ggsave("weather/grafics/weather_part_deriv_gamma_diagonal_all_months.pdf", device = "pdf", width = 9, height = 4.8, units = "in")
ggsave("weather/grafics/weather_part_deriv_gamma_diagonal_all_months.pdf", device = "pdf", width = 9, height = 4.5, units = "in")
##### Figure 3.16 #####
final_est %>%
ggplot(aes( x = as.POSIXct(time), y = value, color = g, linetype = g)) +
facet_wrap(name~., nrow = 2)  +
geom_line(linewidth = .9) +
labs(y = NULL, x = "time", title = expression(Partial~derivatives~of~Gamma~on~the~diagonal) ) +
scale_discrete_manual(
aesthetics = c("color", "linetype"),
values = c("G10" = 2,"G01" = 4),
name = "Deriv.",
labels = c("G10" = expression(italic(d)^{"(1,0)"}*Gamma), "G01" = expression(italic(d)^{"(0,1)"}*Gamma))
) +
deriv_est_theme  +
scale_x_datetime(date_breaks = "8 hours", date_labels = "%H:%M")  +
theme(legend.position = "top")
##### Figure 3.16 #####
final_est %>%
ggplot(aes( x = as.POSIXct(time), y = value, color = g, linetype = g)) +
facet_wrap(name~., nrow = 2)  +
geom_line(linewidth = .9) +
labs(y = NULL, x = "time", title = expression(Partial~derivatives~of~Gamma~on~the~diagonal) ) +
scale_discrete_manual(
aesthetics = c("color", "linetype"),
values = c("G10" = 2,"G01" = 4),
name = "Deriv.",
labels = c("G10" = expression(italic(d)^{"(1,0)"}*Gamma), "G01" = expression(italic(d)^{"(0,1)"}*Gamma))
) +
deriv_est_theme  +
scale_x_datetime(date_breaks = "8 hours", date_labels = "%H:%M")  +
theme(legend.position = "bottom")
ggsave("weather/grafics/weather_part_deriv_gamma_diagonal_all_months.pdf", device = "pdf", width = 9, height = 4.5, units = "in")
##### Figure 3.16 #####
final_est %>%
ggplot(aes( x = as.POSIXct(time), y = value, color = g, linetype = g)) +
facet_wrap(name~., nrow = 2)  +
geom_line(linewidth = .9) +
labs(y = NULL, x = "time", title = expression(Partial~derivatives~of~Gamma~on~the~diagonal) ) +
scale_discrete_manual(
aesthetics = c("color", "linetype"),
values = c("G10" = 2,"G01" = 4),
name = "Deriv.",
labels = c("G10" = expression(italic(d)^{"(1,0)"}*Gamma phantom(0)), "G01" = expression(italic(d)^{"(0,1)"}*Gamma))
##### Figure 3.16 #####
final_est %>%
ggplot(aes( x = as.POSIXct(time), y = value, color = g, linetype = g)) +
facet_wrap(name~., nrow = 2)  +
geom_line(linewidth = .9) +
labs(y = NULL, x = "time", title = expression(Partial~derivatives~of~Gamma~on~the~diagonal) ) +
scale_discrete_manual(
aesthetics = c("color", "linetype"),
values = c("G10" = 2,"G01" = 4),
name = "Deriv.",
labels = c("G10" = expression(italic(d)^{"(1,0)"}*Gamma+phantom(0)), "G01" = expression(italic(d)^{"(0,1)"}*Gamma))
) +
deriv_est_theme  +
scale_x_datetime(date_breaks = "8 hours", date_labels = "%H:%M")  +
theme(legend.position = "bottom")
##### Figure 3.16 #####
final_est %>%
ggplot(aes( x = as.POSIXct(time), y = value, color = g, linetype = g)) +
facet_wrap(name~., nrow = 2)  +
geom_line(linewidth = .9) +
labs(y = NULL, x = "time", title = expression(Partial~derivatives~of~Gamma~on~the~diagonal) ) +
scale_discrete_manual(
aesthetics = c("color", "linetype"),
values = c("G10" = 2,"G01" = 4),
name = "Deriv.",
labels = c("G10" = expression(italic(d)^{"(1,0)"}*Gamma~phantom(0)), "G01" = expression(italic(d)^{"(0,1)"}*Gamma))
) +
deriv_est_theme  +
scale_x_datetime(date_breaks = "8 hours", date_labels = "%H:%M")  +
theme(legend.position = "bottom")
ggsave("weather/grafics/weather_part_deriv_gamma_diagonal_all_months.pdf", device = "pdf", width = 9, height = 4.5, units = "in")
##### Figure 3.16 #####
final_est %>%
ggplot(aes( x = as.POSIXct(time), y = value, color = g, linetype = g)) +
facet_wrap(name~., nrow = 2)  +
geom_line(linewidth = .9) +
labs(y = NULL, x = NULL, title = expression(Partial~derivatives~of~Gamma~on~the~diagonal) ) +
scale_discrete_manual(
aesthetics = c("color", "linetype"),
values = c("G10" = 2,"G01" = 4),
name = "Deriv.",
labels = c("G10" = expression(italic(d)^{"(1,0)"}*Gamma~phantom(0)), "G01" = expression(italic(d)^{"(0,1)"}*Gamma))
) +
deriv_est_theme  +
scale_x_datetime(date_breaks = "8 hours", date_labels = "%H:%M")  +
theme(legend.position = "bottom")
ggsave("weather/grafics/weather_part_deriv_gamma_diagonal_all_months.pdf", device = "pdf", width = 9, height = 4.5, units = "in")
##### Figure 3.12 (a) #####
# Temperature curves in January
N |>
filter(MONAT == 1) |>
ggplot() +
geom_line(aes(x = UHRZEIT, y = TT_10, group = JAHR*TAG, colour = JAHR), alpha = .6) +
labs(y = "Temp. in C°", x = "hours", title = "Temp. in January", colour = "year") +
my_theme
#### results ####
load("weather/data/weather_covariace_results.RData")
# Code for real data example with the weather data from Nuremberg
library(tidyverse)
library(plotly)
library(lubridate)
library(hms)
library(biLocPol) # please install this package from Github first. See "README.md" file for instructions
##### Figure 3.12 (a) #####
# Temperature curves in January
N |>
filter(MONAT == 1) |>
ggplot() +
geom_line(aes(x = UHRZEIT, y = TT_10, group = JAHR*TAG, colour = JAHR), alpha = .6) +
labs(y = "Temp. in C°", x = "hours", title = "Temp. in January", colour = "year") +
my_theme
ggsave("weather/grafics/january_temp_curves.pdf", device = "pdf", width = 5, height = 3.8, unit = "in")
##### Figure 3.16 #####
final_est %>%
ggplot(aes( x = as.POSIXct(time), y = value, color = g, linetype = g)) +
facet_wrap(name~., nrow = 2)  +
geom_line(linewidth = .9) +
labs(y = NULL, x = NULL, title = expression(Partial~derivatives~of~Gamma~on~the~diagonal) ) +
scale_discrete_manual(
aesthetics = c("color", "linetype"),
values = c("G10" = 2,"G01" = 4),
name = "Deriv.",
labels = c("G10" = expression(italic(d)^{"(1,0)"}*Gamma~phantom(0)), "G01" = expression(italic(d)^{"(0,1)"}*Gamma))
) +
deriv_est_theme  +
scale_x_datetime(date_breaks = "8 hours", date_labels = "%H:%M")  +
theme(legend.position = "bottom")
ggsave("weather/grafics/weather_part_deriv_gamma_diagonal_all_months.pdf", device = "pdf", width = 11, height = 5.5, units = "in")
ggsave("weather/grafics/weather_part_deriv_gamma_diagonal_all_months.pdf", device = "pdf", width = 10, height = 5, units = "in")
#### packages, code ####
library(ggplot2)
library(tidyverse)
library(biLocPol)
library(tictoc)
library(plotly)
my_theme = theme_grey(base_size = 15) +
theme(plot.title = element_text(size = 14))
#### results ####
load("cov/data/bandwidth_comparison_derivative_cov_OU.RData")
##### Figure 3.10 #####
ggplot(bw_comparison_tibble) +
geom_point(aes(x = h, y = sup.err, col = p)) +
lims(y = c(0, 10.4)) +
facet_wrap(n ~., nrow = 1) +
my_theme
ggsave("cov/grafics/bw_comp_cov_deriv_OU.pdf", device = "pdf", width = 10, height = 4.5, units = "in")
library(biLocPol) # please install this package from Github first. See "README.md" file for instructions
library(future.apply)
library(tidyverse)
library(tictoc)
library(plotly)
my_theme = theme_grey(base_size = 15) +
theme(plot.title = element_text(size = 14))
#### results ####
load("cov/data/results_3_11.RData")
##### Figure 3.11 ####
err_dec_tib %>%
ggplot(aes(x = n, y = sup.err, col = term, lty = term, pch = term)) +
geom_line() +
geom_point() +
facet_wrap(p ~., nrow = 1) +
my_theme
ggsave("cov/grafics/error_decomp_cov_deriv_OU.pdf", device = "pdf", unit = "in", width = 10, height = 4.5)
#### Packages and Theme ####
library(biLocPol)
library(tidyverse)
library(lubridate)
library(hms)
library(interp)
library(reshape2)
library(plotly)
library(locpol)
library(ffscb)
#### results ####
load("weather/data/weather_estimation.RData")
#### Load and process the data ####
ggsave("weather/grafics/weather_part_deriv_gamma_diagonal_all_months.pdf", device = "pdf", width = 10, height = 6, units = "in")
##### Figure 3.16 #####
final_est %>%
ggplot(aes( x = as.POSIXct(time), y = value, color = g, linetype = g)) +
facet_wrap(name~., nrow = 2)  +
geom_line(linewidth = .9) +
labs(y = NULL, x = NULL, title = expression(Partial~derivatives~of~Gamma~on~the~diagonal) ) +
scale_discrete_manual(
aesthetics = c("color", "linetype"),
values = c("G10" = 2,"G01" = 4),
name = "Deriv.",
labels = c("G10" = expression(italic(d)^{"(1,0)"}*Gamma~phantom(0)), "G01" = expression(italic(d)^{"(0,1)"}*Gamma))
) +
deriv_est_theme  +
scale_x_datetime(date_breaks = "8 hours", date_labels = "%H:%M")  +
theme(legend.position = "bottom")
ggsave("weather/grafics/weather_part_deriv_gamma_diagonal_all_months.pdf", device = "pdf", width = 10, height = 6, units = "in")
ggsave("weather/grafics/sd_all_months.pdf", device = "pdf", unit = "in", width = 11, height = 6)
##### Figure 3.13 #####
sd_tibble |>
ggplot(aes(x = time, y = sd, lty = h, col = h)) +
geom_line(linewidth = .8) +
lims(y = c(0.2, 6)) +
labs(y = NULL, x = NULL, title = "Estimation of the standard deviation") +
theme(text = element_text(size = 18)) +
facet_wrap(.~month, nrow = 2) +
scale_linetype_manual(values = c(2,5,4), name = "h (min)") +
scale_color_manual(values = 1:3, name = "h (min)") +
scale_x_datetime(date_breaks = "8 hours", date_labels = "%H:%M") +
theme(legend.position = 'bottom')
#### results ####
load("weather/data/weather_covariace_results.RData")
##### Figure 3.13 #####
sd_tibble |>
ggplot(aes(x = time, y = sd, lty = h, col = h)) +
geom_line(linewidth = .8) +
lims(y = c(0.2, 6)) +
labs(y = NULL, x = NULL, title = "Estimation of the standard deviation") +
theme(text = element_text(size = 18)) +
facet_wrap(.~month, nrow = 2) +
scale_linetype_manual(values = c(2,5,4), name = "h (min)") +
scale_color_manual(values = 1:3, name = "h (min)") +
scale_x_datetime(date_breaks = "8 hours", date_labels = "%H:%M") +
theme(legend.position = 'bottom')
ggsave("weather/grafics/sd_all_months.pdf", device = "pdf", unit = "in", width = 11, height = 6)
##### Figure 3.13 #####
sd_tibble |>
ggplot(aes(x = time, y = sd, lty = h, col = h)) +
geom_line(linewidth = .8) +
lims(y = c(0.2, 6)) +
labs(y = NULL, x = NULL, subtitle = "Estimation of the standard deviation") +
theme(text = element_text(size = 18)) +
facet_wrap(.~month, nrow = 2) +
scale_linetype_manual(values = c(2,5,4), name = "h (min)") +
scale_color_manual(values = 1:3, name = "h (min)") +
scale_x_datetime(date_breaks = "8 hours", date_labels = "%H:%M") +
theme(legend.position = 'bottom')
ggsave("weather/grafics/sd_all_months.pdf", device = "pdf", unit = "in", width = 11, height = 6)
##### Figure 3.13 #####
sd_tibble |>
ggplot(aes(x = time, y = sd, lty = h, col = h)) +
geom_line(linewidth = .8) +
lims(y = c(0.2, 6)) +
labs(y = NULL, x = NULL, title = expression(Estimation of the standard deviation)) +
##### Figure 3.13 #####
sd_tibble |>
ggplot(aes(x = time, y = sd, lty = h, col = h)) +
geom_line(linewidth = .8) +
lims(y = c(0.2, 6)) +
labs(y = NULL, x = NULL, title = expression(Estimation~of~the~standard~deviation)) +
theme(text = element_text(size = 18)) +
facet_wrap(.~month, nrow = 2) +
scale_linetype_manual(values = c(2,5,4), name = "h (min)") +
scale_color_manual(values = 1:3, name = "h (min)") +
scale_x_datetime(date_breaks = "8 hours", date_labels = "%H:%M") +
theme(legend.position = 'bottom')
ggsave("weather/grafics/sd_all_months.pdf", device = "pdf", unit = "in", width = 11, height = 6)
##### Figure 3.13 #####
sd_tibble |>
ggplot(aes(x = time, y = sd, lty = h, col = h)) +
geom_line(linewidth = .8) +
lims(y = c(0.2, 6)) +
labs(y = NULL, x = NULL, subtitle = expression(Estimation~of~the~standard~deviation)) +
theme(text = element_text(size = 18)) +
facet_wrap(.~month, nrow = 2) +
scale_linetype_manual(values = c(2,5,4), name = "h (min)") +
scale_color_manual(values = 1:3, name = "h (min)") +
scale_x_datetime(date_breaks = "8 hours", date_labels = "%H:%M") +
theme(legend.position = 'bottom')
ggsave("weather/grafics/sd_all_months.pdf", device = "pdf", unit = "in", width = 11, height = 6)
