source("Mean Simulation/functions.R")
##### Simulation Setup #####
set.seed(2374)
n = 10
x = seq(0, 1, 0.01)
obs = seq(0, 1, by = 0.04)
Y = mu(obs) + sapply(1:n, function(x){bm(obs, 0,  sigma = 1)}) +
matrix(rnorm(length(obs)*n, 0, 0.3), length(obs), n)
data = data.frame(x = x, y = mu(x), fac = "mu")
Y.df = melt(data.frame(obs, Y), id.vars = "obs",
variable.name = "i", value.name = "Y")
Y.mean = data.frame(obs, Y = rowMeans(Y))
#bw = lococv(obs, Y, seq(0.1, 0.4, 0.01))
bw = 0.175
Y.est = locPolSmootherC(obs, Y.mean$Y, x, bw, deg = 2, EpaK)
Y.est = data.frame(x = x, Y.hat = Y.est$beta0)
# calulation with subset
obs
subset = seq(2, 26, 2)
Y.est.red = locPolSmootherC(obs[subset], Y.mean$Y[subset], x, 0.25,
deg = 2, EpaK)
Y.est.red = data.frame(x = x, Y.hat = Y.est.red$beta0)
ggplot() +
geom_point(aes(obs, Y, col = i), Y.df, size = .9) +
geom_line(aes(obs, Y, col = i), Y.df, alpha = .3, size = .5, lty = 2) +
geom_line(aes(x, y), data) +
geom_point(aes(obs, Y), Y.mean) +
geom_line(aes(x, Y.hat), Y.est, lty = 2)+
geom_line(aes(x, Y.hat), Y.est.red, lty = 3) +
theme(legend.position = "none") +
labs(y=NULL, x = NULL,
subtitle = "Simulation setup")
library(ggplot2)
library(reshape2)
library(locpol)
library(interp)
library(stats)
library(future)
library(future.apply)
library(parallel)
library(tidyverse)
##### Packages #####
library(ggplot2)
library(reshape2)
library(locpol)
library(interp)
library(stats)
library(future)
library(future.apply)
library(parallel)
library(tidyverse)
source("Mean Simulation/functions.R")
# load functions
source("Mean Simulation/functions.R")
##### Simulation Setup #####
set.seed(2374)
n = 10
x = seq(0, 1, 0.01)
obs = seq(0, 1, by = 0.04)
Y = mu(obs) + sapply(1:n, function(x){bm(obs, 0,  sigma = 1)}) +
matrix(rnorm(length(obs)*n, 0, 0.3), length(obs), n)
data = data.frame(x = x, y = mu(x), fac = "mu")
Y.df = melt(data.frame(obs, Y), id.vars = "obs",
variable.name = "i", value.name = "Y")
Y.mean = data.frame(obs, Y = rowMeans(Y))
bw = 0.175
Y.est = locPolSmootherC(obs, Y.mean$Y, x, bw, deg = 2, EpaK)
Y.est = data.frame(x = x, Y.hat = Y.est$beta0)
# calulation with subset
obs
subset = seq(2, 26, 2)
Y.est.red = locPolSmootherC(obs[subset], Y.mean$Y[subset], x, 0.25,
deg = 2, EpaK)
Y.est.red = data.frame(x = x, Y.hat = Y.est.red$beta0)
ggplot() +
geom_point(aes(obs, Y, col = i), Y.df, size = .9) +
geom_line(aes(obs, Y, col = i), Y.df, alpha = .3, size = .5, lty = 2) +
geom_line(aes(x, y), data) +
geom_point(aes(obs, Y), Y.mean) +
geom_line(aes(x, Y.hat), Y.est, lty = 2)+
geom_line(aes(x, Y.hat), Y.est.red, lty = 3) +
theme(legend.position = "none") +
labs(y=NULL, x = NULL,
subtitle = "Simulation setup")
source("Mean Simulation/bandwidth_comparison_functions.R")
#### Display of the functions ####
x = seq(0,1, 0.005)
mu_deriv_tibble = tibble(x = x,
val = mu_1(x),
fun = "mu'")
mu_tibble = tibble(x = x,
val = mu(x),
fun = "mu")
# estimation of the first derivative
set.seed(234)
n = 10
obs = seq(0, 1, by = 0.01)
Y = mu(obs) + sapply(1:n, function(x){bm(obs, 0,  sigma = 1)}) +
matrix(rnorm(length(obs)*n, 0, 0.3), length(obs), n)
# estimation of derivative and function
# same bandwidth tho
Y_est3 = locPolSmootherC(x = obs, y = rowMeans(Y), xeval = x, bw = 0.15, deg = 3, EpaK)
Y_est2 = locPolSmootherC(x = obs, y = rowMeans(Y), xeval = x, bw = 0.08, deg = 2, EpaK)
mu_tibble = rbind(mu_tibble,
tibble(x = Y_est2$x,
val = Y_est2$beta0,
fun = "deg = 2"),
tibble(x = Y_est3$x,
val = Y_est3$beta0,
fun = "deg = 3"),
tibble(x = obs,
val = rowMeans(Y),
fun = "obs"))
mu_deriv_tibble = rbind(mu_deriv_tibble,
tibble(x = Y_est2$x,
val = Y_est2$beta1,
fun = "deg = 2"),
tibble(x = Y_est3$x,
val = Y_est3$beta1,
fun = "deg = 3") )
mu_deriv_tibble |>
ggplot() +
geom_line(aes(x = x, y = val, col = fun, lty = fun)) +
scale_linetype_manual(values = c(1,2,4),
breaks = c("mu'", "deg = 2", "deg = 3"),
labels = c("deg = 3" = "Cubic",
'mu'   = expression(paste(mu,"'")),
"deg = 2" = "Quad")) +
scale_colour_manual(values =  c("black", "green", "red"),
breaks = c("mu'", "deg = 2", "deg = 3"),
labels = c("deg = 3" = "Cubic",
'mu'   = expression(paste(mu,"'")),
"deg = 2" = "Quad")) +
labs(title = "First derivative", y = NULL, x = NULL, colour = NULL, lty = NULL) +
deriv_est_theme
ggplot() +
geom_line(aes(x = x, y = val, col = fun, lty = fun),
mu_tibble |> filter(fun != "obs")) +
scale_linetype_manual(values = c(1,2,4),
breaks = c("mu", "deg = 2", "deg = 3"),
labels = c("deg = 3" = "Cubic",
'mu'   = expression(mu),
"deg = 2" = "Quad")) +
scale_colour_manual(values =  c("black", "green", "red"),
breaks = c("mu", "deg = 2", "deg = 3"),
labels = c("deg = 3" = "Cubic",
'mu'   = expression(mu),
"deg = 2" = "Quad")) +
geom_point(aes(x = x, y = val),
mu_tibble |> filter(fun == "obs"), alpha = .2) +
labs(title = "Mean function", y = NULL, x = NULL, colour = NULL, lty = NULL) +
deriv_est_theme
##### Packages #####
library(ggplot2)
library(reshape2)
library(locpol)
library(interp)
library(stats)
library(future)
library(future.apply)
library(parallel)
library(tidyverse)
##### source codes #####
#source("Mean Simulation/bandwidth_comparison_functions.R")
#source("Mean Simulation/functions.R")
##### Figure 2.1 - Illustration #####
x = seq(0,1, 0.005)
mu_deriv_tibble = tibble(x = x,
val = mu_1(x),
fun = "mu'")
##### Packages #####
library(ggplot2)
library(reshape2)
library(locpol)
library(interp)
library(stats)
library(future)
library(future.apply)
library(parallel)
library(tidyverse)
##### source codes #####
source("Mean Simulation/bandwidth_comparison_functions.R")
#source("Mean Simulation/functions.R")
##### Figure 2.1 - Illustration #####
x = seq(0,1, 0.005)
mu_deriv_tibble = tibble(x = x,
val = mu_1(x),
fun = "mu'")
mu_tibble = tibble(x = x,
val = mu(x),
fun = "mu")
# estimation of the first derivative
set.seed(234)
n = 10
obs = seq(0, 1, by = 0.01)
Y = mu(obs) + sapply(1:n, function(x){bm(obs, 0,  sigma = 1)}) +
matrix(rnorm(length(obs)*n, 0, 0.3), length(obs), n)
# estimation of derivative and function
# same bandwidth tho
Y_est3 = locPolSmootherC(x = obs, y = rowMeans(Y), xeval = x, bw = 0.15, deg = 3, EpaK)
Y_est2 = locPolSmootherC(x = obs, y = rowMeans(Y), xeval = x, bw = 0.08, deg = 2, EpaK)
mu_tibble = rbind(mu_tibble,
tibble(x = Y_est2$x,
val = Y_est2$beta0,
fun = "deg = 2"),
tibble(x = Y_est3$x,
val = Y_est3$beta0,
fun = "deg = 3"),
tibble(x = obs,
val = rowMeans(Y),
fun = "obs"))
mu_deriv_tibble = rbind(mu_deriv_tibble,
tibble(x = Y_est2$x,
val = Y_est2$beta1,
fun = "deg = 2"),
tibble(x = Y_est3$x,
val = Y_est3$beta1,
fun = "deg = 3") )
###### Mean Function #####
ggplot() +
geom_line(aes(x = x, y = val, col = fun, lty = fun),
mu_tibble |> filter(fun != "obs")) +
scale_linetype_manual(values = c(1,2,4),
breaks = c("mu", "deg = 2", "deg = 3"),
labels = c("deg = 3" = "Cubic",
'mu'   = expression(mu),
"deg = 2" = "Quad")) +
scale_colour_manual(values =  c("black", "green", "red"),
breaks = c("mu", "deg = 2", "deg = 3"),
labels = c("deg = 3" = "Cubic",
'mu'   = expression(mu),
"deg = 2" = "Quad")) +
geom_point(aes(x = x, y = val),
mu_tibble |> filter(fun == "obs"), alpha = .2) +
labs(title = "Mean function", y = NULL, x = NULL, colour = NULL, lty = NULL) +
deriv_est_theme
#ggsave("Grafics/mean_est_n10_p101.png", device = "png", width = 7, height = 3.8, units = "in")
###### First Derivative ######
mu_deriv_tibble |>
ggplot() +
geom_line(aes(x = x, y = val, col = fun, lty = fun)) +
scale_linetype_manual(values = c(1,2,4),
breaks = c("mu'", "deg = 2", "deg = 3"),
labels = c("deg = 3" = "Cubic",
'mu'   = expression(paste(mu,"'")),
"deg = 2" = "Quad")) +
scale_colour_manual(values =  c("black", "green", "red"),
breaks = c("mu'", "deg = 2", "deg = 3"),
labels = c("deg = 3" = "Cubic",
'mu'   = expression(paste(mu,"'")),
"deg = 2" = "Quad")) +
labs(title = "First derivative", y = NULL, x = NULL, colour = NULL, lty = NULL) +
deriv_est_theme
#ggsave("Grafics/derivative_est_n10_p101.png", device = "png", width = 7, height = 3.8, units = "in")
##### Figure 2.2 ######
###### n = 600 ######
N = 10
n = 600
n = 600
alpha = 2.1
p = c(45, 65, 85, 115, 145, 175, 225, 275, 325, 400, 475, 550) # paper
p = c(65, 115, 175, 275, 400, 550) # dis
deg = floor(alpha)
set.seed(244) # 244
m = length(p)
H = sapply(p, function(x)(rev(seq(0.2, 3/x, -0.005))))
H
cl = makeCluster(detectCores( ) - 1);
plan(multisession)
erg = lapply(1:m, function(j){
print(j)
return(h_est_BB(n, p[j], N, H[[j]], deg = deg ))
})
##### source codes #####
#source("Mean Simulation/bandwidth_comparison_functions.R")
source("Mean Simulation/functions.R")
##### Figure 2.2 ######
###### n = 600 ######
N = 1000
n = 600
alpha = 2.1
p = c(45, 65, 85, 115, 145, 175, 225, 275, 325, 400, 475, 550) # paper
p = c(65, 115, 175, 275, 400, 550) # dis
N = 10
deg = floor(alpha)
set.seed(244) # 244
m = length(p)
H = sapply(p, function(x)(rev(seq(0.2, 3/x, -0.005))))
H
cl = makeCluster(detectCores( ) - 1);
plan(multisession)
erg = lapply(1:m, function(j){
print(j)
return(h_est_BB(n, p[j], N, H[[j]], deg = deg ))
})
stopCluster(cl);
med_bandwidth_from_cv = c(0.081245, 0.073190, 0.065435, 0.061080, 0.055635, 0.054645)
med_bandwidth_from_cv = c(0.081245, 0.073190, 0.065435, 0.061080, 0.055635, 0.054645)
erg.df = data.frame(sup.err = unlist(erg), p =
factor(unlist(sapply(1:m, function(j){rep(p[j], length(H[[j]]) + 1)}))),
h = c(0, H[[1]], 0, H[[2]], 0, H[[3]], 0, H[[ 4]], 0, H[[ 5]], 0, H[[ 6]])
) |>
mutate(cv_h = unlist(sapply(1:m, function(j){rep(med_bandwidth_from_cv[j], length(H[[j]]) + 1)}))) |>
group_by(p) |>
mutate(min_h = h[which.min(sup.err)]) |>
ungroup()
erg.df |>
ggplot() +
geom_point(aes(x = h, y = sup.err, color = p, pch = p)) +
geom_point(aes(y = 0, x = cv_h, color = p, pch = p)) +
lims(y = c(0, 0.3)) +
labs(subtitle = "n = 600") #+
erg.df |>
group_by(p) |>
slice_min(sup.err)
###### n = 100 ######
n = 100
set.seed(554)
m = length(p)
H = sapply(p, function(x)(rev(seq(0.2, 3/x, -0.005))))
H
cl = makeCluster(detectCores( ) - 1);
plan(cluster);
erg_n100 = lapply(1:m, function(j){
print(j)
return(h_est_BB(n, p[j], N, H[[j]], deg = deg, sigma = 0.5))
})
stopCluster(cl);
erg_df_n100 = data.frame(sup.err = unlist(erg_n100), p =
factor(unlist(sapply(1:m, function(j){rep(p[j], length(H[[j]]) + 1)}))),
h = c(0, H[[1]], 0, H[[2]], 0, H[[3]], 0, H[[ 4]], 0, H[[ 5]], 0, H[[ 6]])
) |>
group_by(p) |>
mutate(min_h = h[which.min(sup.err)]) %>%
ungroup()
erg_df_n100 |>
filter(p %in% c(65, 115, 175, 275, 400, 550)) |>
ggplot() +
geom_point(aes(x = h, y = sup.err, color = p, pch = p)) +
lims(y = c(0, 0.3)) +
labs(subtitle = "n = 100")
#save.image("R-Codes/data/bw_cross_validation.RData")
load("R-Codes/data/bw_cross_validation.RData")
cv.bw |> head()
#save.image("R-Codes/data/bw_cross_validation.RData")
load("R-Codes/data/bw_cross_validation.RData")
