library(ffscb)
library(reshape2)
library(locpol)
library(interp)
library(stats)
library(future)
library(future.apply)
library(parallel)
library(tidyverse)
library(plotly)
library(biLocPol) # has to be installed from Github
#### load data ####
data("Biomechanics")
Biomechanics
head(Biomechanics)
?Biomechanics
#### preprocessing ####
# generating matrices with the uncushioned data, the cushioned data and the difference
extra.mat = cbind(Biomechanics[, 1:19], rowMeans(Biomechanics[, 2:19]))
colnames(extra.mat) = c("stance_phase", 1:18, "mean")
normal.mat = cbind(Biomechanics[, c(1, 20:37)], rowMeans(Biomechanics[, 20:37]))
colnames(normal.mat) = c("stance_phase", 1:18, "mean")
diff.mat = cbind(Biomechanics[, 1],
Biomechanics[, 2:19] - Biomechanics[, 20:37],
rowMeans(Biomechanics[, 2:19] - Biomechanics[, 20:37]))
colnames(diff.mat) = c("stance_phase", 1:18, "mean")
#### melt to form of tidy data ####
extra = melt(extra.mat, id.vars = "stance_phase",
variable.name = "person",
value.name = "pressure")
normal = melt(normal.mat, id.vars = "stance_phase",
variable.name = "person",
value.name = "pressure")
diff = melt(diff.mat, id.vars = "stance_phase",
variable.name = "person",
value.name = "pressure")
acast(extra, stance_phase ~ person, value.var = "pressure")
normal$shoe = "normal"
extra$shoe = "extra"
diff$shoe = "extra - normal"
df.both = rbind(normal, extra)
normal |>
filter(shoe == "normal", person == "mean") |>
mutate(stance_phase = stance_phase/100) |>
mutate(difference_quot = c(0,diff(pressure)/diff(stance_phase))) |>
pull(difference_quot)
#### Plots of the data ####
##### Figure 5 #####
ggplot() + geom_point(aes(x = stance_phase, y = pressure, group = person),
df.both[df.both$person != "mean", ], size = .2) + facet_wrap(shoe ~.)+
labs(x = "% of stance phase", y = "Nm/Kg", subtitle = "Pressure curves of normal and extra cushioned shoe")
ggsave("biomechanics/grafics/pressure_curves.pdf", device = "pdf",
width = 5, height = 3.8, units = "in")
normal |>
filter(shoe == "normal", person == "mean") |>
mutate(stance_phase = stance_phase/100) |>
mutate(difference_quot = c(0,diff(pressure)/diff(stance_phase))) |>
pull(difference_quot)
normal |>
filter(shoe == "normal", person == "mean") |>
mutate(stance_phase = stance_phase/100) |>
mutate(difference_quot = c(0,diff(pressure)/diff(stance_phase))) |>
pull(difference_quot)
##### Figure 7 #####
ggplot()  +
geom_point(aes(x = stance_phase, y = pressure, group = person),
diff[diff$person != "mean", ], size = .3, alpha= .3, color = "black") +
geom_point(aes(x = stance_phase, y = pressure), diff[diff$person == "mean", ],
size = .9, col = "black") +
labs(x = "% of stance phase", y = "Nm/Kg", subtitle = "Difference of pressure") +
deriv_est_theme
library(ffscb)
library(tidyverse)
library(reshape2)
library(locpol)
library(biLocPol)
library(plotly)
library(MASS)
deriv_est_theme = theme_grey(base_size = 15) +
theme(plot.title = element_text(size = 14))
#### load data ####
data("Biomechanics")
Biomechanics
head(Biomechanics)
?Biomechanics
#### preprocess data as for mean estimation  ####
stance_phase = Biomechanics[,1]
extra.mat = t(Biomechanics[, 2:19])
normal.mat = t(Biomechanics[,20:37])
diff.mat = extra.mat - normal.mat
##### estimation of the variance ####
p = 201
p.eval = 201
var_weights = biLocPol::local_polynomial_weights(p, 0.2, p.eval, F, m = 2, del = 1, eval.type = "diagonal")
Z_normal = observation_transformation(normal.mat)
Z_extra  = observation_transformation(extra.mat)
Z_diff  = observation_transformation(diff.mat)
normal_var = eval_weights(var_weights, Z_normal)
extra_var  = eval_weights(var_weights, Z_extra)
diff_var = eval_weights(var_weights, Z_diff)
var_tib = tibble( x   = rep(stance_phase, 3),
var = c(normal_var[,1],
extra_var[,1],
diff_var[,1]),
cushion = gl(3, p.eval, labels = c("normal", "extra", "diff")))
var_tib |>
filter(cushion != "diff") |>
ggplot(aes(x = x)) +
geom_line(aes(y = var, color = cushion, linetype = cushion)) +
labs(y = "Nm/Kg",
x = "% of stance phase") +
scale_linetype_manual(values = c(2,3)) +
scale_colour_manual(values = c("red", "blue"))
##### Figure 3.17(a) #####
var_tib |>
filter(cushion != "diff") |>
ggplot(aes(x = x)) +
geom_line(aes(y = var, color = cushion, linetype = cushion)) +
labs(y = "Nm/Kg",
x = "% of stance phase") +
scale_linetype_manual(values = c(2,3)) +
scale_colour_manual(values = c("red", "blue"))
my_theme = theme_grey(base_size = 15) +
theme(plot.title = element_text(size = 14))
##### Figure 3.17(a) #####
var_tib |>
filter(cushion != "diff") |>
ggplot(aes(x = x)) +
geom_line(aes(y = var, color = cushion, linetype = cushion)) +
labs(y = "Nm/Kg",
x = "% of stance phase") +
scale_linetype_manual(values = c(2,3)) +
scale_colour_manual(values = c("red", "blue")) +
my_theme
ggsave("biomechanics/grafics/biomechanics_var_normal_extra.df", device = "pdf", unit = "in", width = 5, height = 3.8)
var_tib |>
filter(cushion == "diff") |>
ggplot(aes(x = x)) +
geom_line(aes(y = var, linetype = cushion)) +
labs(y = "Nm/Kg",
x = "% of stance phase")
ggsave("biomechanics/grafics/biomechanics_var_diff.pdf", device = "pdf", unit = "in", width = 5, height = 3.8)
del_var_tib  = tibble(x    = rep(stance_phase, 6),
est = c(normal_var[,2], normal_var[,3],
extra_var[,2], extra_var[,3],
diff_var[,2], diff_var[,3]),
del = rep(gl(2, p.eval, labels = c("G10", "G01")), 3),
cushion = gl(3, 2*p.eval, labels = c("normal", "extra", "diff")))
del_var_tib |>
filter(cushion != "diff") |>
ggplot(aes(x = x)) +
geom_line(aes(y = est, color = cushion, lty = del))+
scale_linetype_manual(name = "Deriv.", values = c(2,3), labels = c("G10" = expression(italic(d)^{"(1,0)"}*Gamma), "G01" = expression(italic(d)^{"(0,1)"}*Gamma))) +
scale_colour_manual(values = c("red", "blue")) +
labs(y = "Nm/Kg",
x = "% of stance phase")
##### Figure 3.18(a) #####
del_var_tib |>
filter(cushion != "diff") |>
ggplot(aes(x = x)) +
geom_line(aes(y = est, color = cushion, lty = del))+
scale_linetype_manual(name = "Deriv.", values = c(2,3), labels = c("G10" = expression(italic(d)^{"(1,0)"}*Gamma), "G01" = expression(italic(d)^{"(0,1)"}*Gamma))) +
scale_colour_manual(values = c("red", "blue")) +
labs(y = "Nm/Kg",
x = "% of stance phase") +
my_theme
ggsave("grafics/biomechanics_del_var_normal_extra.png", device = "png", unit = "in", width = 5, height = 4)
ggsave("biomechanics/grafics/biomechanics_del_var_normal_extra.png", device = "png", unit = "in", width = 5, height = 4)
##### Figure 3.18(b) #####
del_var_tib |>
filter(cushion == "diff") |>
ggplot(aes(x = x)) +
geom_line(aes(y = est, lty = del)) +
scale_linetype_manual(name = "Deriv.", values = c(2,3), labels = c("G10" = expression(italic(d)^{"(1,0)"}*Gamma), "G01" = expression(italic(d)^{"(0,1)"}*Gamma))) +
labs(y = "Nm/Kg",
x = "% of stance phase")
ggsave("grafics/biomechanics_del_var_diff.png", device = "png", unit = "in", width = 5, height = 4)
##### Figure 3.18(a) #####
del_var_tib |>
filter(cushion != "diff") |>
ggplot(aes(x = x)) +
geom_line(aes(y = est, color = cushion, lty = del))+
scale_linetype_manual(name = "Deriv.", values = c(2,3), labels = c("G10" = expression(italic(d)^{"(1,0)"}*Gamma), "G01" = expression(italic(d)^{"(0,1)"}*Gamma))) +
scale_colour_manual(values = c("red", "blue")) +
labs(y = "Nm/Kg",
x = "% of stance phase") +
my_theme
ggsave("biomechanics/grafics/biomechanics_del_var_normal_extra.png", device = "png", unit = "in", width = 5, height = 3.8)
##### Figure 3.18(b) #####
del_var_tib |>
filter(cushion == "diff") |>
ggplot(aes(x = x)) +
geom_line(aes(y = est, lty = del)) +
scale_linetype_manual(name = "Deriv.", values = c(2,3), labels = c("G10" = expression(italic(d)^{"(1,0)"}*Gamma), "G01" = expression(italic(d)^{"(0,1)"}*Gamma))) +
labs(y = "Nm/Kg",
x = "% of stance phase")
ggsave("biomechanics/grafics/biomechanics_del_var_diff.pdf", device = "pdf", unit = "in", width = 5, height = 3.8)
##### estimation of the covariance kernel of the difference #####
p.eval = 25
cov_weights = biLocPol::local_polynomial_weights(p, 0.2, p.eval, F, m = 2, del = 1)
Z = observation_transformation(diff.mat)
cov_est = eval_weights(cov_weights, Z)[,,1]
cov_01_est = eval_weights(cov_weights, Z)[,,2]
x.eval = (1:p.eval - 0.5)/p.eval
plot_ly() |>
add_surface(x = ~x.eval, y = ~x.eval, z = cov_est)
UP = upper.tri(cov_01_est, diag = T)
cov_01_est_up = cov_01_est
cov_01_est_dn = cov_01_est
cov_01_est_dn[UP] = NA
cov_01_est_up[!UP] = NA
plot_ly() %>%
add_surface(x = ~ time, y = ~ time, z = cov_01_est_up) %>%
add_surface(x = ~ time, y = ~ time, z = cov_01_est_dn)
##### Figure 3.18(a) #####
del_var_tib |>
filter(cushion != "diff") |>
ggplot(aes(x = x)) +
geom_line(aes(y = est, color = cushion, lty = del))+
scale_linetype_manual(name = "Deriv.", values = c(2,3), labels = c("G10" = expression(italic(d)^{"(1,0)"}*Gamma), "G01" = expression(italic(d)^{"(0,1)"}*Gamma))) +
scale_colour_manual(values = c("red", "blue")) +
labs(y = "Nm/Kg",
x = "% of stance phase") +
my_theme
ggsave("biomechanics/grafics/biomechanics_del_var_normal_extra.pdf", device = "pdf", unit = "in", width = 5, height = 3.8)
##### Figure 3.17(a) #####
var_tib |>
filter(cushion != "diff") |>
ggplot(aes(x = x)) +
geom_line(aes(y = var, color = cushion, linetype = cushion)) +
labs(y = "Nm/Kg",
x = "% of stance phase") +
scale_linetype_manual(values = c(2,3)) +
scale_colour_manual(values = c("red", "blue")) +
my_theme
ggsave("biomechanics/grafics/biomechanics_var_normal_extra.pdf", device = "pdf", unit = "in", width = 5, height = 3.8)
#### results ####
load("cov/data/estimator_comparison.RData")
#  Figures 3.6
source("cov/functions.r")
#### packages, code ####
library(ggplot2)
library(tidyverse)
library(biLocPol)
my_theme = theme_grey(base_size = 15) +
theme(plot.title = element_text(size = 14))
#### results ####
load("cov/data/estimator_comparison.RData")
#  Figures 3.6
source("cov/functions.r")
##### Figure 8a #####
est_comp |>
filter(n == 100, p == 50, Z == "OU") |>
ggplot(aes(x = h, y = sup.err, pch = estimator, col = m)) +
geom_point() +
lims(y = c(0.03, 1.2)) +
labs(title = "Ornstein-Uhlenbeck", subtitle = "n = 100, p = 50") +
my_theme
##### Figure 8b #####
est_comp |>
filter(n == 100, p == 50, Z == "2rv") |>
ggplot(aes(x = h, y = sup.err, pch = estimator, col = m)) +
geom_point() +
lims(y = c(0.03, 1.1))+
labs(title = "Process 2", subtitle = "n = 100, p = 50") +
my_theme
load("data/bandwidth_comparison_derivative_cov_OU.RData")
bw_comparison_tibble = Reduce(rbind, bw_comparison)
load("cov/data/bandwidth_comparison_derivative_cov_OU.RData")
bw_comparison_tibble = Reduce(rbind, bw_comparison)
colnames(bw_comparison_tibble) = c("n", "p", "h", "sup.err")
bw_comparison_tibble = bw_comparison_tibble %>%
as_tibble() %>%
mutate(p = as.factor(p))
ggplot(bw_comparison_tibble) +
geom_point(aes(x = h, y = sup.err, col = p)) +
lims(y = c(0, 10.4)) +
facet_wrap(n ~., nrow = 1)
ggsave("cov/grafics/bw_comp_cov_deriv_OU.pdf", device = "pdf", unit = "in", width = 8, height = 5)
ggplot(bw_comparison_tibble) +
geom_point(aes(x = h, y = sup.err, col = p)) +
lims(y = c(0, 10.4)) +
facet_wrap(n ~., nrow = 1) +
my_theme
ggsave("cov/grafics/bw_comp_cov_deriv_OU.pdf", device = "pdf", unit = "in", width = 8, height = 5)
library(ffscb)
library(tidyverse)
library(reshape2)
library(locpol)
library(biLocPol)
library(plotly)
library(MASS)
my_theme = theme_grey(base_size = 15) +
theme(plot.title = element_text(size = 14))
deriv_est_theme = theme_grey(base_size = 15) +
theme(plot.title = element_text(size = 14))
#### load data ####
data("Biomechanics")
Biomechanics
head(Biomechanics)
?Biomechanics
#### preprocess data as for mean estimation  ####
stance_phase = Biomechanics[,1]
extra.mat = t(Biomechanics[, 2:19])
normal.mat = t(Biomechanics[,20:37])
diff.mat = extra.mat - normal.mat
##### estimation of the variance ####
p = 201
p.eval = 201
var_weights = biLocPol::local_polynomial_weights(p, 0.2, p.eval, F, m = 2, del = 1, eval.type = "diagonal")
Z_normal = observation_transformation(normal.mat)
Z_extra  = observation_transformation(extra.mat)
Z_diff  = observation_transformation(diff.mat)
normal_var = eval_weights(var_weights, Z_normal)
extra_var  = eval_weights(var_weights, Z_extra)
diff_var = eval_weights(var_weights, Z_diff)
var_tib = tibble( x   = rep(stance_phase, 3),
var = c(normal_var[,1],
extra_var[,1],
diff_var[,1]),
cushion = gl(3, p.eval, labels = c("normal", "extra", "diff")))
##### Figure 3.17(a) #####
var_tib |>
filter(cushion != "diff") |>
ggplot(aes(x = x)) +
geom_line(aes(y = var, color = cushion, linetype = cushion)) +
labs(y = "Nm/Kg",
x = "% of stance phase") +
scale_linetype_manual(values = c(2,3)) +
scale_colour_manual(values = c("red", "blue")) +
my_theme
ggsave("biomechanics/grafics/biomechanics_var_normal_extra.pdf", device = "pdf", unit = "in", width = 5, height = 3.8)
##### Figure 3.17(b) #####
var_tib |>
filter(cushion == "diff") |>
ggplot(aes(x = x)) +
geom_line(aes(y = var, linetype = cushion)) +
labs(y = "Nm/Kg",
x = "% of stance phase") +
my_theme
ggsave("biomechanics/grafics/biomechanics_var_diff.pdf", device = "pdf", unit = "in", width = 5, height = 3.8)
del_var_tib  = tibble(x    = rep(stance_phase, 6),
est = c(normal_var[,2], normal_var[,3],
extra_var[,2], extra_var[,3],
diff_var[,2], diff_var[,3]),
del = rep(gl(2, p.eval, labels = c("G10", "G01")), 3),
cushion = gl(3, 2*p.eval, labels = c("normal", "extra", "diff")))
##### Figure 3.18(a) #####
del_var_tib |>
filter(cushion != "diff") |>
ggplot(aes(x = x)) +
geom_line(aes(y = est, color = cushion, lty = del))+
scale_linetype_manual(name = "Deriv.", values = c(2,3), labels = c("G10" = expression(italic(d)^{"(1,0)"}*Gamma), "G01" = expression(italic(d)^{"(0,1)"}*Gamma))) +
scale_colour_manual(values = c("red", "blue")) +
labs(y = "Nm/Kg",
x = "% of stance phase") +
my_theme
ggsave("biomechanics/grafics/biomechanics_del_var_normal_extra.pdf", device = "pdf", unit = "in", width = 5, height = 3.8)
##### Figure 3.18(b) #####
del_var_tib |>
filter(cushion == "diff") |>
ggplot(aes(x = x)) +
geom_line(aes(y = est, lty = del)) +
scale_linetype_manual(name = "Deriv.", values = c(2,3), labels = c("G10" = expression(italic(d)^{"(1,0)"}*Gamma), "G01" = expression(italic(d)^{"(0,1)"}*Gamma))) +
labs(y = "Nm/Kg",
x = "% of stance phase") +
my_theme
ggsave("biomechanics/grafics/biomechanics_del_var_diff.pdf", device = "pdf", unit = "in", width = 5, height = 3.8)
load("C:/Users/mberger.PC12599/HESSENBOX/GitHub/FDA-Covariance-Estimator/data/bandwidth_comparison_derivative_cov_2rv.RData")
load("C:/Users/mberger.PC12599/HESSENBOX/GitHub/FDA-Covariance-Estimator/data/bandwidth_comparison_derivative_cov_OU.RData")
#### results ####
load("cov/data/bandwidth_comparison_derivative_cov_OU.RData")
#### results ####
load("cov/data/bandwidth_comparison_derivative_cov_OU.RData")
rm(weight)
dimnames(error_decomp_arr) = list(p.seq, c("eps", "dsc", "prc", "mix", "sup"), n.seq)
err_dec_tib = error_decomp_arr %>%
apply(2, rbind) %>%
as_tibble() %>%
mutate(n = rep(n.seq, each = 4),
p = rep(p.seq, 4),
h = bw_comparison_tibble |>
group_by(n, p) |>
slice_min(sup.err) |>
pull(h)) %>%
pivot_longer(1:5, names_to = "term", values_to = "sup.err")
library(biLocPol) # please install this package from Github first. See "README.md" file for instructions
library(future.apply)
library(tidyverse)
library(tictoc)
library(plotly)
dimnames(error_decomp_arr) = list(p.seq, c("eps", "dsc", "prc", "mix", "sup"), n.seq)
err_dec_tib = error_decomp_arr %>%
apply(2, rbind) %>%
as_tibble() %>%
mutate(n = rep(n.seq, each = 4),
p = rep(p.seq, 4),
h = bw_comparison_tibble |>
group_by(n, p) |>
slice_min(sup.err) |>
pull(h)) %>%
pivot_longer(1:5, names_to = "term", values_to = "sup.err")
err_dec_tib %>%
ggplot() +
geom_line(aes(x = p, y = sup.err, col = term, lty = term)) +
facet_wrap(n~., nrow = 1)
err_dec_tib %>%
ggplot() +
geom_line(aes(x = n, y = sup.err, col = term, lty = term)) +
facet_wrap(p ~., nrow = 1)
ggsave("cov/grafics/error_decomp_cov_deriv_OU.pdf", device = "pdf", unit = "in", width = 10, height = 5.5)
##### Figure 3.11 ####
err_dec_tib %>%
ggplot(aes(x = n, y = sup.err, col = term, lty = term, pch = term)) +
geom_line() +
geom_point() +
facet_wrap(p ~., nrow = 1)
ggsave("cov/grafics/error_decomp_cov_deriv_OU.pdf", device = "pdf", unit = "in", width = 10, height = 5.5)
library(plotly)
library(tidyverse)
library(biLocPol)
#### results ####
load("cov/data/illustrations.RData")
##### Load Data #####
# instead of evaluating the functions all again the results can be loaded with
load("cov/data/illustrations.RData")
##### Processes #####
# Figure of paths of the processes of the second process
# not contained in the paper
set.seed(134)
# plot empirical covariances with covariance kernel
###### Figure 1 ######
figure31 = plot_ly(df.all, x = ~Var1, y = ~Var2, z = ~Z.all, size = .4) |>
add_markers() |>
add_surface(x = x, y = x, z = cov.ou.eval,
colors = c('#BF382A', '#0C4B8E'), alpha = .3) |>
layout(scene = list(xaxis = list(title = ""),
yaxis = list(title = ""),
zaxis = list(title = "")))
figure31
#### results ####
load("cov/data/bandwidth_comparison_derivative_cov_OU.RData")
my_theme = theme_grey(base_size = 15) +
theme(plot.title = element_text(size = 14))
##### Figure 3.11 ####
err_dec_tib %>%
ggplot(aes(x = n, y = sup.err, col = term, lty = term, pch = term)) +
geom_line() +
geom_point() +
facet_wrap(p ~., nrow = 1) +
my_theme
#### results ####
load("cov/data/bandwidth_comparison_derivative_cov_OU.RData")
dimnames(error_decomp_arr) = list(p.seq, c("eps", "dsc", "prc", "mix", "sup"), n.seq)
err_dec_tib = error_decomp_arr %>%
apply(2, rbind) %>%
as_tibble() %>%
mutate(n = rep(n.seq, each = 4),
p = rep(p.seq, 4),
h = bw_comparison_tibble |>
group_by(n, p) |>
slice_min(sup.err) |>
pull(h)) %>%
pivot_longer(1:5, names_to = "term", values_to = "sup.err")
err_dec_tib %>%
ggplot() +
geom_line(aes(x = p, y = sup.err, col = term, lty = term)) +
facet_wrap(n~., nrow = 1)
##### Figure 3.11 ####
err_dec_tib %>%
ggplot(aes(x = n, y = sup.err, col = term, lty = term, pch = term)) +
geom_line() +
geom_point() +
facet_wrap(p ~., nrow = 1) +
my_theme
ggsave("cov/grafics/error_decomp_cov_deriv_OU.pdf", device = "pdf", unit = "in", width = 10, height = 5.5)
save.image("cov/data/results_3_11.RData")
#### results ####
load("cov/data/results_3_11.RData")
library(biLocPol) # please install this package from Github first. See "README.md" file for instructions
library(future.apply)
library(tidyverse)
library(tictoc)
library(plotly)
library(tictoc)
library(plotly)
my_theme = theme_grey(base_size = 15) +
theme(plot.title = element_text(size = 14))
#### results ####
load("cov/data/results_3_11.RData")
#### functions ####
source("cov/functions.R")
#### results ####
load("cov/data/illustrations.RData")
##### Load Data #####
# instead of evaluating the functions all again the results can be loaded with
load("cov/data/illustrations.RData")
#### results ####
# instead of evaluating the functions all again the results can be loaded with
load("cov/data/illustrations.RData")
# plot empirical covariances with covariance kernel
###### Figure 1 ######
figure31 = plot_ly(df.all, x = ~Var1, y = ~Var2, z = ~Z.all, size = .4) |>
add_markers() |>
add_surface(x = x, y = x, z = cov.ou.eval,
colors = c('#BF382A', '#0C4B8E'), alpha = .3) |>
layout(scene = list(xaxis = list(title = ""),
yaxis = list(title = ""),
zaxis = list(title = "")))
figure31
save_image("cov/grafics/test.pdf")
reticulate::py_config()
